/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/scene_animation_02.glb -o ./components/WebGL/Model/__Model.tsx -r public --types --draco 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    body: THREE.SkinnedMesh
    bottoms: THREE.SkinnedMesh
    cap: THREE.SkinnedMesh
    comtac: THREE.SkinnedMesh
    comtac_yeahpad: THREE.SkinnedMesh
    glass: THREE.SkinnedMesh
    goggle_belt: THREE.SkinnedMesh
    goggle_frame: THREE.SkinnedMesh
    Head_1: THREE.SkinnedMesh
    shoes: THREE.SkinnedMesh
    tops: THREE.SkinnedMesh
    suitcase: THREE.Mesh
    Root: THREE.Bone
  }
  materials: {
    Material_baked: THREE.MeshStandardMaterial
    ['Material_baked.001']: THREE.MeshStandardMaterial
    ['glass.001']: THREE.MeshStandardMaterial
    suitcase: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'ArmatureAction'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['bone']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/models/scene_animation_02.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Root} />
          <skinnedMesh name="body" geometry={nodes.body.geometry} material={materials.Material_baked} skeleton={nodes.body.skeleton} />
          <skinnedMesh name="bottoms" geometry={nodes.bottoms.geometry} material={materials.Material_baked} skeleton={nodes.bottoms.skeleton} />
          <skinnedMesh name="cap" geometry={nodes.cap.geometry} material={materials['Material_baked.001']} skeleton={nodes.cap.skeleton} />
          <skinnedMesh name="comtac" geometry={nodes.comtac.geometry} material={materials['Material_baked.001']} skeleton={nodes.comtac.skeleton} />
          <skinnedMesh name="comtac_yeahpad" geometry={nodes.comtac_yeahpad.geometry} material={materials['Material_baked.001']} skeleton={nodes.comtac_yeahpad.skeleton} />
          <skinnedMesh name="glass" geometry={nodes.glass.geometry} material={materials['glass.001']} skeleton={nodes.glass.skeleton} />
          <skinnedMesh name="goggle_belt" geometry={nodes.goggle_belt.geometry} material={materials['Material_baked.001']} skeleton={nodes.goggle_belt.skeleton} />
          <skinnedMesh name="goggle_frame" geometry={nodes.goggle_frame.geometry} material={materials['Material_baked.001']} skeleton={nodes.goggle_frame.skeleton} />
          <skinnedMesh name="Head_1" geometry={nodes.Head_1.geometry} material={materials['Material_baked.001']} skeleton={nodes.Head_1.skeleton} />
          <skinnedMesh name="shoes" geometry={nodes.shoes.geometry} material={materials['Material_baked.001']} skeleton={nodes.shoes.skeleton} />
          <skinnedMesh name="tops" geometry={nodes.tops.geometry} material={materials.Material_baked} skeleton={nodes.tops.skeleton} />
        </group>
        <mesh name="suitcase" geometry={nodes.suitcase.geometry} material={materials.suitcase} position={[0.551, 0.282, -4.68]} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/scene_animation_02.glb')
