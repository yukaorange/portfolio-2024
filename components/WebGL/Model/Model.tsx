/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/scene_for_portfolio_2024.glb -o ./components/Layout/WebGL/Model.tsx -r public --types --draco 
*/

import { useGLTF } from '@react-three/drei';
import React, { useMemo } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import { AnimationControls } from '@/types/animation';

import characterFragment from '@/shaders/character/fragment-character.glsl';
import characterVertex from '@/shaders/character/vertex-character.glsl';
import suitcaseFragment from '@/shaders/suitcase/fragment-suitcase.glsl';
import suitcaseVertex from '@/shaders/suitcase/vertex-suitcase.glsl';

type GLTFResult = GLTF & {
  nodes: {
    body: THREE.Mesh;
    bottoms: THREE.Mesh;
    cap: THREE.Mesh;
    comtac: THREE.Mesh;
    comtac_yeahpad: THREE.Mesh;
    glass: THREE.Mesh;
    goggle_belt: THREE.Mesh;
    goggle_frame: THREE.Mesh;
    Head: THREE.Mesh;
    shoes: THREE.Mesh;
    tops: THREE.Mesh;
    suitcase: THREE.Mesh;
  };
  materials: {};
};

type GroupProps = JSX.IntrinsicElements['group'];

interface ModelProps extends GroupProps {
  textures?: {
    characterTexture: THREE.Texture;
    suitcaseTexture: THREE.Texture;
  };
  animationControls: AnimationControls;
}

export const Model = ({ textures, animationControls, ...props }: ModelProps) => {
  const { nodes } = useGLTF('/models/scene_for_portfolio_2024_2.glb') as GLTFResult;

  const characterMaterial = useMemo(() => {
    if (!textures) return;

    const { characterTexture } = textures;

    const shaderMaterial = new THREE.ShaderMaterial({
      uniforms: {
        uTexture: {
          value: characterTexture,
        },
        // uResolution: {
        //   value: null,
        // },
        // uTextureResolution: {
        //   value: null,
        // },
        // uTime: {
        //   value: 0,
        // },
      },
      vertexShader: characterVertex,
      fragmentShader: characterFragment,
    });

    return shaderMaterial;
  }, [textures]);

  const suitcaseMaterial = useMemo(() => {
    if (!textures) return;

    const { suitcaseTexture } = textures;

    const shaderMaterial = new THREE.ShaderMaterial({
      uniforms: {
        uTexture: {
          value: suitcaseTexture,
        },
        // uResolution: {
        //   value: null,
        // },
        // uTextureResolution: {
        //   value: null,
        // },
        // uTime: {
        //   value: 0,
        // },
      },
      vertexShader: suitcaseVertex,
      fragmentShader: suitcaseFragment,
    });

    // const meshBasicMaterial = new THREE.MeshBasicMaterial({
    //   map: suitcaseTexture,
    // });

    return shaderMaterial;
  }, [textures]);

  const scaleFactor = 1.0;

  return (
    <group {...props} scale={[scaleFactor, scaleFactor, scaleFactor]} dispose={null}>
      <mesh
        geometry={nodes.suitcase.geometry}
        material={suitcaseMaterial}
        position={[0.068, 0, -0.135]}
      />
      <mesh geometry={nodes.body.geometry} material={characterMaterial} />
      <mesh geometry={nodes.bottoms.geometry} material={characterMaterial} />
      <mesh geometry={nodes.cap.geometry} material={characterMaterial} />
      <mesh geometry={nodes.comtac.geometry} material={characterMaterial} />
      <mesh geometry={nodes.comtac_yeahpad.geometry} material={characterMaterial} />
      <mesh geometry={nodes.glass.geometry} material={characterMaterial} />
      <mesh geometry={nodes.goggle_belt.geometry} material={characterMaterial} />
      <mesh geometry={nodes.goggle_frame.geometry} material={characterMaterial} />
      <mesh geometry={nodes.Head.geometry} material={characterMaterial} />
      <mesh geometry={nodes.shoes.geometry} material={characterMaterial} />
      <mesh geometry={nodes.tops.geometry} material={characterMaterial} />
    </group>
  );
};

useGLTF.preload('/models/scene_for_portfolio_2024_3.glb');
